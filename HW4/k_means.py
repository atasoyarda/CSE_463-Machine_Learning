# -*- coding: utf-8 -*-
"""k_means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZp78qtEwuUANMPtSIb4-8OakIBYMzwC
"""

import matplotlib.pyplot as plt
import numpy as np

def load_dataset(dataset: str, small: bool = False):

        with np.load( "mnist.npz", allow_pickle=True) as f:
            x_train, labels_train = f['x_train'], f['y_train']
            X_test, labels_test = f['x_test'], f['y_test']

        x_train = x_train.reshape(-1, 784)
        X_test = X_test.reshape(-1, 784)

        x_train = x_train / 255
        X_test = X_test / 255
        return ((x_train, labels_train), (X_test, labels_test))

def calculate_centers(data, classifications, num_centers):

    new_centers = np.zeros((num_centers, data.shape[1]))
    
    for i in range(num_centers):
        data_points = data[classifications == i]
        new_center = np.mean(data_points, axis=0)
        new_centers[i] = new_center
    return new_centers

def cluster_data(data, centers):

    classifications = np.zeros(data.shape[0])

    for i, data_point in enumerate(data):

        distances = np.linalg.norm(centers - data_point, axis=1)
        classification = np.argmin(distances)
        classifications[i] = classification
    
    return classifications

def calculate_error(data, centers):

    total_error = 0

    for i in range(data.shape[0]):

        distances = np.linalg.norm(centers - data[i], axis=1)
        closest_center_idx = np.argmin(distances)
        total_error += distances[closest_center_idx]

    return total_error / data.shape[0]

def lloyd_algorithm(data: np.ndarray, num_centers: int, epsilon: float = 10e-3) -> np.ndarray:


    centers = data[:num_centers]
    error_history = []
    max_diff=float("inf")
    while max_diff >= epsilon:

        classifications = cluster_data(data, centers)
        error = calculate_error(data, centers)
        error_history.append(error)
        new_centers = calculate_centers(data, classifications, num_centers)
        max_diff = np.max(np.abs(centers - new_centers))
        centers = new_centers
    return error_history,centers

def main():

    (x_train, _), (x_test, _) = load_dataset("mnist")
    x_train=x_train[:10000]

    error_history,centers = lloyd_algorithm(x_train, num_centers=10)

    plt.plot(error_history)
    plt.xlabel('Iteration number')
    plt.ylabel('Objective function')
    plt.savefig('0.png')
    plt.clf()

    for i in range(10):
       plt.imshow(centers[i].reshape(28, 28), cmap='gray')
       plt.savefig(str(i+1)+'.png')
       plt.clf()

    k_values = [2, 4, 8, 16, 32, 64]

    training_errors = []
    test_errors = []

    for k in k_values:

        _, centers = lloyd_algorithm(x_train, k)
        
        training_error = calculate_error(x_train, centers)
      
        test_error = calculate_error(x_test, centers)

        training_errors.append(training_error)
        test_errors.append(test_error)

    plt.plot(k_values, training_errors, label='Training error')
    plt.plot(k_values, test_errors, label='Test error')
    plt.legend()
    plt.savefig('11.png')
    print("s")
if __name__ == "__main__":
    main()